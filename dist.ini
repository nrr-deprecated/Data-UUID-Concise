name              = Data-UUID-Concise
author            = Nathaniel Reindl <nrr@corvidae.org>
license           = Perl_5
copyright_holder  = Nathaniel Reindl

; version provider
[AutoVersion]  ; build a version from the date
major = 1
 
; choose files to include
[GatherDir]         ; everything under top dir
exclude_filename = README.pod   ; skip this generated file
exclude_filename = META.json    ; skip this generated file
exclude_filename = .gitignore   ; skip this generated file
exclude_filename = README.PATCHING ; skip this generated file
exclude_filename = perlcritic.rc   ; skip this generated file
 
[PruneCruft]        ; default stuff to skip
except = .gitignore
except = README.PATCHING
except = perlcritic.rc
[ManifestSkip]      ; if -f MANIFEST.SKIP, skip those, too
 
; file modifications
[OurPkgVersion]     ; add $VERSION = ... to all files
[InsertCopyright]    ; add copyright at "# COPYRIGHT"
[PodWeaver]         ; generate Pod
[PerlTidy]
perltidyrc = .perltidyrc
 
; generated files
[License]           ; boilerplate license
[ReadmeFromPod]     ; from Pod (runs after PodWeaver)
[ReadmeAnyFromPod]  ; create README.pod in repo directory
type = pod
filename = README.pod
location = root
 
; t tests
[Test::Compile]     ; make sure .pm files all compile
fake_home = 1       ; fakes $ENV{HOME} just in case
 
; xt tests
[Test::PodSpelling]  ; xt/author/pod-spell.t
[Test::Perl::Critic] ; xt/author/critic.t
[MetaTests]         ; xt/release/meta-yaml.t
[PodSyntaxTests]    ; xt/release/pod-syntax.t
[PodCoverageTests]  ; xt/release/pod-coverage.t
[Test::Portability] ; xt/release/portability.t (of file name)
[Test::Version]     ; xt/release/test-version.t
 
; metadata
[AutoPrereqs]       ; find prereqs from code
[MinimumPerl]       ; determine minimum perl version
[GithubMeta]
 
[MetaNoIndex]       ; sets 'no_index' in META
directory = t
directory = xt
directory = examples
directory = corpus
package = DB        ; just in case
 
[Bugtracker]        ; defaults to RT
 
[MetaProvides::Package] ; add 'provides' to META files
meta_noindex = 1        ; respect prior no_index directives
 
[MetaYAML]          ; generate META.yml (v1.4)
[MetaJSON]          ; generate META.json (v2)
 
; build system
[ExecDir]           ; include 'bin/*' as executables
[ShareDir]          ; include 'share/' for File::ShareDir
[MakeMaker]         ; create Makefile.PL
 
; manifest (after all generated files)
[Manifest]          ; create MANIFEST
 
; copy META.json back to repo dis
[CopyFilesFromBuild]
copy = META.json
move = .gitignore
 
; before release
[Git::Check]        ; ensure all files checked in
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = README.pod
allow_dirty = META.json
 
[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
[CheckChangesHasContent] ; ensure Changes has been updated
[CheckExtraTests]   ; ensure xt/ tests pass
[TestRelease]       ; ensure t/ tests pass
[ConfirmRelease]    ; prompt before uploading
 
; releaser
[UploadToCPAN]      ; uploads to CPAN
 
; after release
[NextRelease]
 
[Git::Commit] ; commit Changes (as released)
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = README.pod
allow_dirty = META.json
 
[Git::Tag]          ; tag repo with custom tag
tag_format = release-%v
 
[Git::Push]         ; push repo to remote
push_to = origin
